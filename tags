M##unicode.c##	##unicode.c##	/^int	main()$/
M#test.c#	#test.c#	/^int main (int argc, __attribute__((unused)) char */
Mmain	main.c	/^int		main(__attribute__((unused)) int argc, __attr/
Mtest	test.c	/^int main (int argc, __attribute__((unused)) char */
Municode	unicode.c	/^int main()$/
Mva_test	va_test.c	/^int		main(int argc, char **argv)$/
Mva_test1	va_test1.c	/^int		main(int argc, char **argv)$/
f_lstdel	libft/ft_lstmap.c	/^static void	f_lstdel(t_list *list)$/
ft_atoi	libft/ft_atoi.c	/^int		ft_atoi(const char *str)$/
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/
ft_count_bits	##unicode.c##	/^int		ft_count_bits(int z)$/
ft_get_fd	libft/get_next_line.c	/^static t_list	*ft_get_fd(t_list **buff, int fd)$/
ft_intlen	libft/ft_intlen.c	/^size_t	ft_intlen(int nbr)$/
ft_is_whitespace	libft/ft_is_whitespace.c	/^int		ft_is_whitespace(char c)$/
ft_isalnum	libft/ft_isalnum.c	/^int		ft_isalnum(int c)$/
ft_isalpha	libft/ft_isalpha.c	/^int		ft_isalpha(int c)$/
ft_isascii	libft/ft_isascii.c	/^int		ft_isascii(int c)$/
ft_isdigit	libft/ft_isdigit.c	/^int		ft_isdigit(int c)$/
ft_isprint	libft/ft_isprint.c	/^int		ft_isprint(int c)$/
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/
ft_lstadd	libft/ft_lstadd.c	/^void	ft_lstadd(t_list **alst, t_list *new)$/
ft_lstdel	libft/ft_lstdel.c	/^void	ft_lstdel(t_list **alst, void (*del)(void *, /
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list **alst, void (*del)(void /
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(t_list *ele/
ft_lstmap	libft/ft_lstmap.c	/^t_list		*ft_lstmap(t_list *lst, t_list *(*f)(t_lis/
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void const *content, size_t cont/
ft_memalloc	libft/ft_memalloc.c	/^void	*ft_memalloc(size_t size)$/
ft_memccpy	libft/ft_memccpy.c	/^void	*ft_memccpy(void *dest, const void *src, int /
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/
ft_memcmp	libft/ft_memcmp.c	/^int		ft_memcmp(const void *s1, const void *s2, siz/
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_/
ft_memdel	libft/ft_memdel.c	/^void	ft_memdel(void **ap)$/
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size/
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *b, int c, size_t len)$/
ft_parse_all	#ft_parse_flags.c#	/^void	ft_parse_all(char **format, t_field *parser)$/
ft_parse_flags	#ft_parse_flags.c#	/^void	ft_parse_flags(char **format, t_field *parser/
ft_parse_length	#ft_parse_flags.c#	/^void	ft_parse_length(char **format, t_field *parse/
ft_pow	libft/ft_pow.c	/^int		ft_pow(int nb, int pow)$/
ft_print_8_to_11	##unicode.c##	/^char	*ft_print_8_to_11(int c)$/
ft_printf	#ft_printf.c#	/^int		ft_printf(char* format, ...)$/
ft_put	libft/ft_strsplit.c	/^static	char	**ft_put(char const *s, char **s1, cha/
ft_putchar	libft/ft_putchar.c	/^void	ft_putchar(char c)$/
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/
ft_putendl	libft/ft_putendl.c	/^void	ft_putendl(char const *s)$/
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char const *s, int fd)$/
ft_putnbr	libft/ft_putnbr.c	/^void	ft_putnbr(int n)$/
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/
ft_putstr	libft/ft_putstr.c	/^void	ft_putstr(char const *s)$/
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char const *s, int fd)$/
ft_reverse	libft/ft_reverse.c	/^char	*ft_reverse(char *s)$/
ft_rot_n	libft/ft_rot_n.c	/^char	*ft_rot_n(char *str, int n)$/
ft_strcat	libft/ft_strcat.c	/^char	*ft_strcat(char *s1, const char *s2)$/
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/
ft_strclr	libft/ft_strclr.c	/^void	ft_strclr(char *s)$/
ft_strcmp	libft/ft_strcmp.c	/^int		ft_strcmp(const char *s1, const char *s2)$/
ft_strcpy	libft/ft_strcpy.c	/^char	*ft_strcpy(char *dest, const char *srt)$/
ft_strdel	libft/ft_strdel.c	/^void	ft_strdel(char **as)$/
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(const char *srt)$/
ft_strequ	libft/ft_strequ.c	/^int		ft_strequ(char const *s1, char const *s2)$/
ft_striter	libft/ft_striter.c	/^void	ft_striter(char *s, void (*f)(char *))$/
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, /
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size/
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(const char *str)$/
ft_strmap	libft/ft_strmap.c	/^char	*ft_strmap(char const *s, char (*f)(char))$/
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned/
ft_strncat	libft/ft_strncat.c	/^char	*ft_strncat(char *s1, const char *s2, size_t /
ft_strncmp	libft/ft_strncmp.c	/^int		ft_strncmp(const char *s1, const char *s2, si/
ft_strncpy	libft/ft_strncpy.c	/^char	*ft_strncpy(char *dest, const char *str, size/
ft_strnequ	libft/ft_strnequ.c	/^int		ft_strnequ(char const *s1, char const *s2, si/
ft_strnew	libft/ft_strnew.c	/^char	*ft_strnew(size_t size)$/
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *smal/
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/
ft_strsplit	libft/ft_strsplit.c	/^char			**ft_strsplit(char const *s, char c)$/
ft_strstr	libft/ft_strstr.c	/^char	*ft_strstr(const char *big, const char *littl/
ft_strsub	libft/ft_strsub.c	/^char	*ft_strsub(char const *s, unsigned int start,/
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char const *s)$/
ft_strzero	libft/ft_strzero.c	/^char	*ft_strzero(char *str)$/
ft_swap_bits	libft/ft_swap_bits.c	/^unsigned char	ft_swap_bits(unsigned char octet)$/
ft_tolower	libft/ft_tolower.c	/^int		ft_tolower(int c)$/
ft_toupper	libft/ft_toupper.c	/^int		ft_toupper(int c)$/
ft_words	libft/ft_strsplit.c	/^static	int		ft_words(char const *s, char c)$/
get_next_line	libft/get_next_line.c	/^int				get_next_line(const int fd, char **line)$/
length_field	#ft_printf.h#	/^	enum			length_field$/
printstr	va_test.c	/^void	printstr(int num, ...)$/
read_fd	libft/get_next_line.c	/^int				read_fd(t_list **buff, int fd)$/
sumnum	va_test.c	/^int		sumnum(int num, ...)$/
t_field	#ft_printf.h#	/^}						t_field;$/
t_list	libft/libft.h	/^}					t_list;$/
while	#test.c#	/^while (str[i] != '\\0' && str2[k] != '\\0')$/
write_slash_n_to_buff	libft/get_next_line.c	/^int				write_slash_n_to_buff(t_list **buff)$/
